version: '3.9'
services:
  zookeeper:
    image: wurstmeister/zookeeper
    restart: always
    ports:
      - ${ZOOKEEPER_PORT}:2181

  kafka:
    image: wurstmeister/kafka
    healthcheck:
      test: [ "CMD-SHELL", "nc -z localhost ${KAFKA_INTERNAL_PORT}" ]
      interval: 4s
      timeout: 5s
      retries: 10
    restart: on-failure
    ports:
      - ${KAFKA_INTERNAL_PORT}:${KAFKA_INTERNAL_PORT}
      - ${KAFKA_EXTERNAL_PORT}:${KAFKA_EXTERNAL_PORT}
    environment:
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka:${KAFKA_INTERNAL_PORT},EXTERNAL://localhost:${KAFKA_EXTERNAL_PORT}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:${KAFKA_INTERNAL_PORT},EXTERNAL://0.0.0.0:${KAFKA_EXTERNAL_PORT}
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    depends_on:
      - zookeeper



  scraper:
    restart: on-failure
    build:
      context: ./scraper
      dockerfile: Dockerfile
    environment:
      KAFKA_PORT: ${KAFKA_INTERNAL_PORT}
    command: [ "./scraper", "-h", "kafka", "-p", "${KAFKA_INTERNAL_PORT}" ]
    depends_on:
     kafka:
        condition: service_healthy

  consumer:
    restart: on-failure
    build:
      context: ./rust_server
      dockerfile: Dockerfile
    environment:
      KAFKA_HOST: kafka
      KAFKA_PORT: ${KAFKA_INTERNAL_PORT}
    command: [ "./consumer", "-h", "kafka", "-p", "${KAFKA_INTERNAL_PORT}" ]
    depends_on:
     kafka:
        condition: service_healthy